<?xml version="1.0" encoding="UTF-8"?>
<mapper xmlns="contract.xsd">
	<header>
		<application>HDS</application>
		<project>ZZD</project>
		<transaction>TST020</transaction>
		<datasource>DB01</datasource>
		<use>Y</use>
		<desc>ORACLE 거래 테스트</desc>
	</header>
	<commands>
		<statement id="G01" seq="0" use="Y" timeout="0" desc="데이터베이스 현재 시간 조회" modified="2020-02-10 00:00:00">
			<![CDATA[
			SELECT GETDATE() AS ServerDate
			]]>
		</statement>

		<statement id="G02" seq="0" use="Y" timeout="0" desc="매개변수, 로컬변수 테스트" native="Y" modified="2020-02-10 00:00:00">
			<![CDATA[
BEGIN


     OPEN :C1 FOR
            SELECT NVL(A.NUM,B.NUM) NUM
                  , A.PROCDT PROCDT1, A.PROCDETAILNAME PROCDETAILNAME1, CASE WHEN A.PROCDETAILNAME IS NOT NULL AND A.PROCDT IS NOT NULL THEN 'Y' WHEN A.PROCDT IS NOT NULL THEN 'N' ELSE '' END PASSYN1
                  , B.PROCDT PROCDT2, B.PROCDETAILNAME PROCDETAILNAME2, CASE WHEN B.PROCDETAILNAME IS NOT NULL AND B.PROCDT IS NOT NULL THEN 'Y' WHEN B.PROCDT IS NOT NULL THEN 'N' ELSE '' END PASSYN2
                  , C.PROCDT PROCDT3, C.PROCDETAILNAME PROCDETAILNAME3, CASE WHEN C.PROCDETAILNAME IS NOT NULL AND C.PROCDT IS NOT NULL THEN 'Y' WHEN C.PROCDT IS NOT NULL THEN 'N' ELSE '' END PASSYN3
                  , D.PROCDT PROCDT4, D.PROCNAME, D.PASSYN PASSYN4
            FROM FR_CODEDETAIL CD
            LEFT JOIN (
                        SELECT ROWNUM NUM,
                            TO_CHAR(HG.PASSDT,'YYYY-MM-DD') AS PROCDT
                            , TO_CHAR(CD1.CODENAME) AS PROCNAME
                            , NVL(CD2.CODENAME,KC.CURRICULUMNAME) AS PROCDETAILNAME
                        FROM HS_GRADUATIONEXAM HG
                        JOIN   FR_CODEDETAIL CD1 ON HG.EXAMINATIONTYPE = CD1.CODE AND CD1.GROUPCODE = 'HS049'
                        LEFT JOIN   FR_CODEDETAIL CD2 ON HG.EXAMINATIONCD = CD2.CODE AND CD2.GROUPCODE = 'HS050'
                        LEFT JOIN    KK_CURRICULUM KC  ON HG.EXAMINATIONCD = KC.CURRICULUMID
                        WHERE HG.STUDENTID = :I_STUDENTID
                        AND HG.EXAMINATIONTYPE ='1'
                        AND PASSYN ='1'
                        ) A ON CD.CODENAME = A.NUM
            LEFT JOIN (
                        SELECT ROWNUM NUM,
                            TO_CHAR(HG.PASSDT,'YYYY-MM-DD') AS PROCDT
                            , TO_CHAR(CD1.CODENAME) AS PROCNAME
                            , NVL(CD2.CODENAME,KC.CURRICULUMNAME) AS PROCDETAILNAME
                        FROM HS_GRADUATIONEXAM HG
                        JOIN   FR_CODEDETAIL CD1 ON HG.EXAMINATIONTYPE = CD1.CODE AND CD1.GROUPCODE = 'HS049'
                        LEFT JOIN   FR_CODEDETAIL CD2 ON HG.EXAMINATIONCD = CD2.CODE AND CD2.GROUPCODE = 'HS050'
                        LEFT JOIN    KK_CURRICULUM KC  ON HG.EXAMINATIONCD = KC.CURRICULUMID
                        WHERE HG.STUDENTID = :I_STUDENTID
                        AND HG.EXAMINATIONTYPE ='2'
                        AND PASSYN ='1'
                        ) B ON CD.CODENAME = B.NUM
            LEFT JOIN (
                        SELECT ROWNUM NUM,
                            TO_CHAR(HT.ENDPASSDT)  AS PROCDT
                            , TO_CHAR(CD1.CODENAME) AS PROCNAME
                            , CD2.CODENAME AS PROCDETAILNAME
                            , TO_CHAR(KP.PROFESSORNAME ) AS PROFESSORNAME
                            , TO_CHAR(HT.REMARK) AS  REMARK
                        FROM HS_THESIS HT
                        JOIN HS_STUDENT HS ON HT.STUDENTID = HS.STUDENTID
                        JOIN FR_CODEDETAIL CD1 ON  HT.THESISCD = CD1.CODE AND CD1.GROUPCODE='HS054'
                        JOIN FR_CODEDETAIL CD2 ON  HT.ENDPASSYN = CD2.CODE AND CD2.GROUPCODE='HS053'
                        LEFT JOIN  KW_PROFESSOR KP ON HS.PROFESSORCD = KP.PROFESSORID
                        WHERE HT.STUDENTID = :I_STUDENTID
                        AND HT.ENDPASSYN IS NOT NULL
                        ) C ON CD.CODENAME = C.NUM
            LEFT JOIN (
                        SELECT ROWNUM NUM, NVL(TO_CHAR(HS.DIPLOMADT ), TO_CHAR(HS.CERTIFICATEDT)) PROCDT
                                , NVL(TO_CHAR(DIPLOMAYEAR) || '년도 ' || CD1.CODENAME,TO_CHAR(CERTIFICATEYEAR) || '년도 ' || CD1.CODENAME) PROCNAME
                                , CASE WHEN HS.DIPLOMADT IS NOT NULL THEN '졸업' WHEN HS.CERTIFICATEDT IS NOT NULL THEN '수료' ELSE '' END PASSYN
                        FROM  HS_STUDENT HS
                        LEFT JOIN FR_CODEDETAIL CD1 ON  (HS.CERTIFICATESEMESTERCD = CD1.CODE OR HS.DIPLOMASEMESTERCD = CD1.CODE) AND CD1.GROUPCODE='HS013'
                        WHERE   HS.STUDENTID = :I_STUDENTID
                        ) D ON CD.CODENAME = D.NUM
            WHERE CD.GROUPCODE = 'SYS11' AND NVL(A.NUM,B.NUM) IS NOT NULL
            order by NVL(A.NUM,B.NUM);

      OPEN :C2 FOR
         SELECT
                CASE WHEN TB.ACCEPTGRADE = 'A' THEN '인정학점' WHEN TB.ACCEPTGRADE IS NULL THEN '전체학점' ELSE '본교학점' END AS GRADE
                ,DECODE(SUM(DECODE(TB.ACCEPTGRADE,'L',TB.GRADE,0)) , 0 ,0 ,ROUND(SUM( DECODE(TB.ACCEPTGRADE,'L',TB.AVGSCORE*TB.GRADE,0)) / SUM(DECODE(TB.ACCEPTGRADE,'L',TB.GRADE,0)),1)) AS AVGSCORE
                ,DECODE(SUM(DECODE(TB.ACCEPTGRADE,'L',TB.GRADE,0)) , 0 ,0 ,ROUND(SUM( DECODE(TB.ACCEPTGRADE,'L',TB.SCORE*TB.GRADE,0)) / SUM(DECODE(TB.ACCEPTGRADE,'L',TB.GRADE,0)),1)) AS SCORE
                , CASE WHEN TB.ACCEPTGRADE = 'A' THEN NULL ELSE MAX( NVL(HR.GRADE,0)) END AS REGGRADE
                , SUM( DECODE(LEVELS,0,0,NVL(TB.GRADE,0))) AS TOTGRADE
                , SUM(  DECODE(LEVELS,0,0,DECODE(TB.COURSECD,'00',TB.GRADE,0))) AS COURSECDGRADE00 -- 타학과
                , SUM(  DECODE(LEVELS,0,0,DECODE(TB.COURSECD,'82',DECODE(NVL(TB.ALTERNATIVEYN,'0'),'0',TB.GRADE,0),0))) AS COURSECDGRADE82 -- 전공
                , SUM(  DECODE(LEVELS,0,0,DECODE(TB.COURSECD,'81',TB.GRADE,0))) AS COURSECDGRADE81 -- 전공선택
                , SUM(  DECODE(LEVELS,0,0,CASE TB.COURSECD WHEN '86' THEN TB.GRADE WHEN '82' THEN DECODE(TB.ALTERNATIVEYN,'1',TB.GRADE,0) ELSE 0 END )) AS COURSECDGRADE86 -- 공통필수
                , SUM(  CASE WHEN TB.COURSECD NOT IN ('00','81','82','86')    THEN TB.GRADE ELSE 0 END ) AS COURSECDGRADE -- 기타
                , CASE WHEN TB.ACCEPTGRADE = 'A' THEN NULL ELSE MAX(CD.CODENAME) END AS THESISCD
        FROM  (
                    SELECT SUM(GRADE) GRADE,STUDENTID FROM  HS_REGISTERCOURSE
                    WHERE STUDENTID = :I_STUDENTID
                    AND   CANCELYN IS NULL
                    GROUP BY STUDENTID
        )  HR
        LEFT JOIN HS_REPORTCARD TB ON TB.STUDENTID = HR.STUDENTID   AND TB.PROCESSTYPE IS NULL AND   TB.CONFIRMDT IS NOT NULL
        LEFT JOIN HS_THESIS HT ON HR.STUDENTID = HT.STUDENTID
--        LEFT JOIN FR_CODEDETAIL CD ON CD.GROUPCODE='HS054' AND NVL(HT.THESISCD,'01') = CD.CODE --조현아선생요청수정 2018.08.31
        LEFT JOIN HS_STUDENT HS ON HS.STUDENTID = TB.STUDENTID
        LEFT JOIN FR_CODEDETAIL CD ON CD.GROUPCODE='HS054' AND NVL(HT.THESISCD,HS.THESISOPT) = CD.CODE
        WHERE HR.STUDENTID = :I_STUDENTID
        GROUP BY ROLLUP(TB.ACCEPTGRADE);
        --GROUP BY TB.STUDENTID;

      OPEN :C3 FOR
         SELECT
                CD1.CODENAME AS EXAMCD
               , CD.CODENAME AS DEGREECD
               , NVL(TB.TOTALGRADE,0) TOTALGRADE
               , NVL(TB.COURSECDGRADE82,0) COURSECDGRADE82
               , NVL(TB.COURSECDGRADE81,0) COURSECDGRADE81
               , NVL(TB.COURSECDGRADE86,0) COURSECDGRADE86
               , NVL(TB.COURSECDGRADE00,0) COURSECDGRADE00
               , NVL(TB.AVGSCORE,0) AVGSCORE
               , NVL(TB.ESUBJECTCOUNT,0) AS ESUBJECTCOUNT
               , NVL(TB.SSUBJECTCOUNT,0) AS SSUBJECTCOUNT
               , TB.SEMESTERCD
    FROM   HS_STUDENT HS
    JOIN     HS_STANDARDSCORE TB ON HS.DEGREECD = TB.DEGREECD
                                        AND  HS.REGISTYEAR = TB.STANDARDYEARY AND HS.REGISTSEMESTERCD = TB.STANDARDSEMESTERCD
    JOIN     FR_CODEDETAIL CD ON TB.DEGREECD = CD.CODE AND CD.GROUPCODE='HS011'
    JOIN     FR_CODEDETAIL CD1 ON TB.EXAMCD = CD1.CODE AND CD1.GROUPCODE='HS051' AND CD1.CODE = (CASE HS.DEGREECD WHEN '01' THEN DECODE(NVL(HS.THESISOPT,'01'), '01', '09', '08') ELSE  '09' END )  
    --AND CD1.CODE IN ('08','09')

    WHERE  HS.STUDENTID = :I_STUDENTID
    AND TB.USEYN='1'
    ORDER BY TB.EXAMCD,TB.DEGREECD;



    END;
			]]>
			<param id=":C1" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":C2" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":C3" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":I_STUDENTID" type="Varchar2" length="-1" value="NULL" />
			<param id=":I_DEGREECD" type="Varchar2" length="-1" value="NULL" />
		</statement>
		<statement id="G03" seq="0" use="Y" timeout="0" desc="일반 SQL 문법 테스트" modified="2020-02-10 00:00:00">
			<![CDATA[
DECLARE
    USER_ERR EXCEPTION;
    O_MESSAGE VARCHAR2(30);
    V_RESULT NUMBER;
BEGIN
    O_MESSAGE := '사용자 오류 메시지';
    RAISE USER_ERR; 
    -- SELECT SYSDATE AS CURRENTDATE FROM DUAL;
    V_RESULT := 1 / 0;
    DBMS_OUTPUT.PUT_LINE(V_RESULT);
    
    EXCEPTION
        WHEN ZERO_DIVIDE THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
        WHEN USER_ERR THEN
            DBMS_OUTPUT.PUT_LINE(CONCAT(SQLCODE, O_MESSAGE));
            RAISE_APPLICATION_ERROR(-20000, '프로그램 오류 처리');
END HELLOWORLD;
			]]>
		</statement>
		<statement id="G04" seq="0" use="Y" timeout="0" desc="일반 SQL 문법 테스트" native="Y" modified="2020-02-10 00:00:00">
			<![CDATA[
BEGIN
    V_RETURNCODE := 0;
    :O_RETURNCODE := V_RETURNCODE;
    
    OPEN :O_RC1 FOR SELECT * FROM FR_CODEDETAIL WHERE GROUPCODE = :I_GROUPCODE1;
    OPEN :O_RC2 FOR SELECT * FROM FR_CODEDETAIL WHERE GROUPCODE = :I_GROUPCODE2;
    OPEN :O_RC3 FOR SELECT * FROM FR_CODEDETAIL WHERE GROUPCODE = :I_GROUPCODE3;
    
    EXCEPTION
        WHEN USER_ERR THEN
            DBMS_OUTPUT.PUT_LINE(CONCAT(SQLCODE, SQLERRM));
END HELLOWORLD;
			]]>
			<param id=":O_RC1" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":O_RC2" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":O_RC3" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":O_RETURNCODE" type="Int32" length="-1" value="NULL" direction="Output" />
			<param id=":I_GROUPCODE1" type="Varchar2" length="-1" value="NULL" />
			<param id=":I_GROUPCODE2" type="Varchar2" length="-1" value="NULL" />
			<param id=":I_GROUPCODE3" type="Varchar2" length="-1" value="NULL" />
		</statement>
		<statement id="G05" seq="0" use="Y" timeout="0" desc="일반 SQL 문법 테스트" native="Y" modified="2020-02-10 00:00:00">
			<![CDATA[

BEGIN
    OPEN :C FOR
        SELECT * FROM SBMUSER.SBM_STUDY_RESULT WHERE CUSTOMER_NO = :I_CUSTOMER_NO;
        
END;
			]]>
			<param id=":C" type="RefCursor" length="-1" value="NULL" direction="Output" />
			<param id=":I_CUSTOMER_NO" type="Varchar2" length="-1" value="NULL" />
		</statement>
		<statement id="G06" seq="0" use="Y" timeout="0" desc="일반 SQL 문법 테스트" native="Y" modified="2020-02-10 00:00:00">
		<![CDATA[
 DECLARE
     V_USER_CNT   NUMBER := 0;
    V_USER   NUMBER := 0;
	V_RESULT   NUMBER := 0;
  BEGIN
        
 SELECT COUNT(1) INTO V_USER_CNT FROM SBM_H_LOGIN_DUP_CHK WHERE CUSTOMER_NO =  I_CUSTOMER_NO AND MAC_ADDRESS != I_MAC_ADDRESS;
    
    SELECT SUM(CNT)
    INTO V_USER
    FROM (
            SELECT COUNT(1) AS CNT FROM WYC_CUSTOMER_JOIN WCJ
             INNER JOIN WYC_AGENCY WA ON WA.AGENCY_NO = WCJ.AGENCY_NO
             WHERE WCJ.STATUS = 1 AND WCJ.CUSTOMER_NO = I_CUSTOMER_NO AND WA.IS_W_AGENCY = 1 AND WCJ.CUSTOMER_NAME =  I_CUSTOMER_NAME AND NVL(WCJ.IS_FOOTHOLD_REST, 0) = 0--우영 휴원여부
            UNION ALL
            SELECT COUNT(1) AS CNT FROM YFC_CUSTOMER_JOIN WHERE STATUS = 1 AND CUSTOMER_NO = I_CUSTOMER_NO AND CUSTOMER_NAME =  I_CUSTOMER_NAME
    ) A
    ;
        
    IF V_USER_CNT > 1 THEN
         V_RESULT := -2 ;    -- 여러단말 이용제한
    ELSIF V_USER = 0 THEN
        V_RESULT := -1 ;    --회원정보 없음
    ELSE
        V_RESULT := 0 ;    --정상
        
        MERGE INTO SBM_H_LOGIN_DUP_CHK A
        USING (
                SELECT  :I_CUSTOMER_NO AS CUSTOMER_NO
                       ,:I_MAC_ADDRESS AS MAC_ADDRESS
                       ,:I_CUSTOMER_NAME AS CUSTOMER_NAME
                       ,V_RESULT AS O_RESULT
                       ,:I_DEVICE_NAME AS DEVICE_NAME
                FROM DUAL
        ) B
        ON (A.CUSTOMER_NO = B.CUSTOMER_NO AND A.MAC_ADDRESS = B.MAC_ADDRESS )
        WHEN MATCHED THEN
                  UPDATE SET CUSTOMER_NAME = B.CUSTOMER_NAME,
                             O_RESULT = B.O_RESULT,
                             DEVICE_NAME = B.DEVICE_NAME,
                             CREATE_DT = SYSDATE
        WHEN NOT MATCHED THEN
                  INSERT(CUSTOMER_NO, CUSTOMER_NAME, O_RESULT, MAC_ADDRESS, DEVICE_NAME)
                  VALUES(B.CUSTOMER_NO, B.CUSTOMER_NAME, B.O_RESULT, B.MAC_ADDRESS, B.DEVICE_NAME);  
        
    END IF;

    OPEN C FOR
        SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') AS SERVER_DATE FROM DUAL;    

    COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
          V_RESULT := SQLCODE; -- 데이터 취득 실패
        ROLLBACK;
		
	
  END ;
]]>		
		<param id=":C" type="RefCursor" length="-1" value="NULL" direction="Output" />
		<param id=":O_RESULT" type="Varchar2" length="-1" value="NULL" direction="Output" />
		<param id = ":I_CUSTOMER_NO" type="Varchar2" length ="-1" value ="NULL" />		
		</statement>
		
		<statement id="GD07" seq="0" use="Y" timeout="0" desc="set경우 회원 확인 및 조회" modified="2020-02-10 00:00:00">
			<![CDATA[
            IF EXISTS (select USMOBILE from DYETEC_HOME.dbo.T_MEMBER where USMOBILE = @Number)
			
            BEGIN
            select NUM,USNAME,USERID,USMOBILE,count(*) over() as TOT_CNT
            from DYETEC_HOME.dbo.T_MEMBER where USMOBILE = @Number;
            END
            
            ELSE
            
            BEGIN
			select count(*) as TOT_CNT from DYETEC_HOME.dbo.T_MEMBER where USMOBILE = @Number;
            END
			]]>
			<param id="@Number" type="String" length="-1" value="NULL" />
		</statement>
		
		<statement id="LD01" seq="0" use="Y" timeout="0" desc="입력 3종 원단 조회" modified="2020-02-10 00:00:00">
		<![CDATA[
			select MstNm,MstCd from DYETEC_HOME.dbo.Good_Mst where ParentCd = 'G000001' and MstNm = @MstNm1 or MstNm = @MstNm2 or MstNm = @MstNm3;
			]]>
			<param id="@MstNm1" type="String" length="-1" value="NULL" />
			<param id="@MstNm2" type="String" length="-1" value="NULL" />
			<param id="@MstNm3" type="String" length="-1" value="NULL" />
		</statement>

		<statement id="LD02" seq="0" use="Y" timeout="0" desc="필요 정보들 조회" modified="2020-02-10 00:00:00">
			<![CDATA[
			select MstCd code ,MstNm name,CONVERT(NVARCHAR(10),MstKey) filename from DYETEC_HOME.dbo.Good_Mst 
            where MstCd = @InputVaue1 or MstCd = @InputVaue2 or MstCd = @InputVaue3
			or MstCd = @InputVaue4 or MstCd = @InputVaue5 or MstCd = @InputVaue6
			or MstCd = @InputVaue7 or MstCd = @InputVaue8 or MstCd = @InputVaue9
            
			UNION ALL
            
            SELECT TOP 5 A.ProdID code,A.ProName name,B.FileName filename 
            FROM DYETEC_HOME.dbo.T_PROD A INNER JOIN DYETEC_HOME.dbo.T_PROD_FILE B ON A.ProdID = B.ProdID 
            where A.ProdID = @InputVaue10 or A.ProdID = @InputVaue11 or A.ProdID = @InputVaue12 or A.ProdID = @InputVaue13 or A.ProdID = @InputVaue14
			]]>
			<param id="@InputVaue1" type="String" length="-1" value="NULL" />
			<param id="@InputVaue2" type="String" length="-1" value="NULL" />
			<param id="@InputVaue3" type="String" length="-1" value="NULL" />
			<param id="@InputVaue4" type="String" length="-1" value="NULL" />
			<param id="@InputVaue5" type="String" length="-1" value="NULL" />
			<param id="@InputVaue6" type="String" length="-1" value="NULL" />
			<param id="@InputVaue7" type="String" length="-1" value="NULL" />
			<param id="@InputVaue8" type="String" length="-1" value="NULL" />
			<param id="@InputVaue9" type="String" length="-1" value="NULL" />
			<param id="@InputVaue10" type="String" length="-1" value="NULL" />
			<param id="@InputVaue11" type="String" length="-1" value="NULL" />
			<param id="@InputVaue12" type="String" length="-1" value="NULL" />
			<param id="@InputVaue13" type="String" length="-1" value="NULL" />
			<param id="@InputVaue14" type="String" length="-1" value="NULL" />
		</statement>
		
	</commands>
</mapper>